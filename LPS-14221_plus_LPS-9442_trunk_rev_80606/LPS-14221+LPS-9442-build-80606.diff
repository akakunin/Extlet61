Revision: 80606
Index: portal-impl/src/com/liferay/portal/deploy/hot/ExtHotDeployListener.java
===================================================================
--- portal-impl/src/com/liferay/portal/deploy/hot/ExtHotDeployListener.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/deploy/hot/ExtHotDeployListener.java	(working copy)
@@ -34,14 +34,23 @@ import com.liferay.util.SystemProperties;
 import com.liferay.util.ant.CopyTask;
 
 import java.io.File;
+import java.io.FileFilter;
+import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.InputStream;
+import java.net.URL;
+import java.util.ArrayList;
 
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
 
 import javax.servlet.ServletContext;
+import org.apache.commons.configuration.PropertiesConfiguration;
+import org.springframework.core.io.UrlResource;
 
 /**
  * @author Brian Wing Shun Chan
@@ -68,56 +77,6 @@ public class ExtHotDeployListener extends BaseHotDeployListener {
 		}
 	}
 
-	protected void copyJar(
-			ServletContext servletContext, String dir, String jarName)
-		throws Exception {
-
-		String servletContextName = servletContext.getServletContextName();
-
-		String jarFullName = "/WEB-INF/" + jarName + "/" + jarName + ".jar";
-
-		InputStream is = servletContext.getResourceAsStream(jarFullName);
-
-		if (is == null) {
-			throw new HotDeployException(jarFullName + " does not exist");
-		}
-
-		String newJarFullName =
-			dir + "ext-" + servletContextName + jarName.substring(3) + ".jar";
-
-		StreamUtil.transfer(is, new FileOutputStream(new File(newJarFullName)));
-	}
-
-	protected void installExt(
-			ServletContext servletContext, ClassLoader portletClassLoader)
-		throws Exception {
-
-		String servletContextName = servletContext.getServletContextName();
-
-		String globalLibDir = PortalUtil.getGlobalLibDir();
-		String portalWebDir = PortalUtil.getPortalWebDir();
-		String portalLibDir = PortalUtil.getPortalLibDir();
-		String pluginWebDir = WebDirDetector.getRootDir(portletClassLoader);
-
-		copyJar(servletContext, globalLibDir, "ext-service");
-		copyJar(servletContext, portalLibDir, "ext-impl");
-		copyJar(servletContext, portalLibDir, "ext-util-bridges");
-		copyJar(servletContext, portalLibDir, "ext-util-java");
-		copyJar(servletContext, portalLibDir, "ext-util-taglib");
-
-		mergeWebXml(portalWebDir, pluginWebDir);
-
-		CopyTask.copyDirectory(
-			pluginWebDir + "WEB-INF/ext-web/docroot", portalWebDir,
-			StringPool.BLANK, "**/WEB-INF/web.xml", true, false);
-
-		FileUtil.copyFile(
-			pluginWebDir + "WEB-INF/ext-" + servletContextName + ".xml",
-			portalWebDir + "WEB-INF/ext-" + servletContextName + ".xml");
-
-		ExtRegistry.registerExt(servletContext);
-	}
-
 	protected void doInvokeDeploy(HotDeployEvent event) throws Exception {
 		ServletContext servletContext = event.getServletContext();
 
@@ -135,12 +94,27 @@ public class ExtHotDeployListener extends BaseHotDeployListener {
 			return;
 		}
 
+		if (_redeployServletContextNames.contains(servletContextName) && 
+			ExtRegistry.isRegistered(servletContextName)) {
+
+			if (_log.isInfoEnabled()) {
+				_log.info(
+					"Redeploying Ext Plugin for " + servletContextName);
+			}
+			uninstallExt(servletContextName);
+			if (_log.isInfoEnabled()) {
+				_log.info(
+					"Ext Plugin " + servletContextName + " has been undeployed.");
+			}
+		}
+
 		if (_log.isInfoEnabled()) {
 			_log.info(
 				"Registering extension environment for " + servletContextName);
 		}
 
 		if (ExtRegistry.isRegistered(servletContextName)) {
+			ExtRegistry.updateRegisteredServletContext(servletContext);
 			if (_log.isInfoEnabled()) {
 				_log.info(
 					"Extension environment for " + servletContextName +
@@ -184,7 +158,15 @@ public class ExtHotDeployListener extends BaseHotDeployListener {
 			return;
 		}
 
-		installExt(servletContext, event.getContextClassLoader());
+		try {
+			installExt(servletContext, event.getContextClassLoader());
+		} catch (Exception e) {
+			// rollback
+			uninstallExt(servletContextName);
+
+			throw e;
+		}
+
 
 		FileAvailabilityUtil.reset();
 
@@ -213,20 +195,150 @@ public class ExtHotDeployListener extends BaseHotDeployListener {
 			return;
 		}
 
-		if (_log.isInfoEnabled()) {
-			_log.info(
-				"Extension environment for " +
-					servletContextName + " will not be undeployed");
+		if(ExtRegistry.isRegistered(servletContextName)){
+			_redeployServletContextNames.add(servletContextName);
+			if (_log.isInfoEnabled()) {
+				_log.info(
+					"Redeploying Ext Plugin for"
+						+ servletContextName +
+						" ... waiting for deploy");
+			}
+		} else {
+			_log.error(
+				"Ext Plugin for " + servletContextName +
+					" is not registered!");
 		}
 	}
 
-	protected void mergeWebXml(String portalWebDir, String pluginWebDir) {
-		if (!FileUtil.exists(
-				pluginWebDir + "WEB-INF/ext-web/docroot/WEB-INF/web.xml")) {
+	protected void installExt(
+			ServletContext servletContext, ClassLoader portletClassLoader)
+		throws Exception {
 
-			return;
+		String servletContextName = servletContext.getServletContextName();
+
+		String portalWebDir = PortalUtil.getPortalWebDir();
+		String pluginWebDir = WebDirDetector.getRootDir(portletClassLoader);
+
+		ExtRegistry.registerExt(servletContext);
+
+		installJars(servletContext);
+		installWebInfJar(portalWebDir, pluginWebDir, servletContextName);
+		installWebFiles(portalWebDir, pluginWebDir, servletContextName);
+
+		rebuildPortalExtPluginProperties();
+		rebuildServiceJS();
+		rebuildWebXml();
+
+		FileUtil.copyFile(
+			pluginWebDir + "WEB-INF/ext-" + servletContextName + ".xml",
+			portalWebDir + "WEB-INF/ext-" + servletContextName + ".xml");
+	}
+	protected void copyJar(
+			ServletContext servletContext, String dir, String jarName)
+		throws Exception {
+
+		String servletContextName = servletContext.getServletContextName();
+
+		String jarFullName = "/WEB-INF/" + jarName + "/" + jarName + ".jar";
+
+		InputStream is = servletContext.getResourceAsStream(jarFullName);
+
+		if (is == null) {
+			throw new HotDeployException(jarFullName + " does not exist");
+		}
+
+		String newJarFullName =
+			dir + "ext-" + servletContextName + jarName.substring(3) + ".jar";
+
+		StreamUtil.transfer(is, new FileOutputStream(new File(newJarFullName)));
+	}
+	protected void installJars(ServletContext servletContext)
+			throws Exception {
+		String globalLibDir = PortalUtil.getGlobalLibDir();
+		String portalLibDir = PortalUtil.getPortalLibDir();
+
+		for (String jarName : ExtRegistry.EXT_PLUGIN_JARS_GLOBAL_CL) {
+			copyJar(servletContext, globalLibDir, jarName);
 		}
+		for (String jarName : ExtRegistry.EXT_PLUGIN_JARS_PORTAL_CL) {
+			copyJar(servletContext, portalLibDir, jarName);
+		}
+	}
+	protected void installWebFiles(
+		String portalWebDir, String pluginWebDir,
+		String servletContextName) throws Exception {
+
+		HookHotDeployListener hookListener = new HookHotDeployListener();
+		Set<String> files = ExtRegistry.getFiles(servletContextName);
+		for(String file : files){
+			if(file.startsWith("ext-web/docroot/") &&
+				!ExtRegistry.isMergedFile(file)) {
+
+				String relativeFile = file.substring(
+					file.indexOf("docroot/") + "docroot/".length());
+
+				File portalFile = new File(portalWebDir, relativeFile);
+				File pluginFile = new File(pluginWebDir + "WEB-INF/", file);
+
+				File hookPortalFile = hookListener.getPortalJspBackupFile(portalFile);
+				if(hookPortalFile.exists()){
+					resetPortalFileBackup(portalFile.getAbsolutePath(), hookPortalFile.getAbsolutePath());
+					if (_log.isDebugEnabled()) {
+						_log.debug("Copying [from, to]: [" + pluginFile + ", " + hookPortalFile + "]");
+					}
+					FileUtil.copyFile(pluginFile, hookPortalFile);
+				} else {
+					resetPortalFileBackup(portalFile.getAbsolutePath());
+					if (_log.isDebugEnabled()) {
+						_log.debug("Copying [from, to]: [" + pluginFile + ", " + portalFile + "]");
+					}
+					FileUtil.copyFile(pluginFile, portalFile);
+				}
+			}
+		}
+	}
+	protected void installWebInfJar(String portalWebDir, String pluginWebDir, String servletContextName)
+			throws Exception {
+		String zipName = portalWebDir + "WEB-INF/lib/ext-" + servletContextName + "-webinf" + ".jar";
 
+		File dir = new File(pluginWebDir + "WEB-INF/ext-web/docroot/WEB-INF");
+		if (!dir.isDirectory()) {
+			throw new IllegalArgumentException("Not a directory: " + dir);
+		}
+
+		File[] files = dir.listFiles(new FileFilter() {
+			public boolean accept(File pathname) {
+				return ExtRegistry.isMergedFile(pathname.getPath());
+			}
+		});
+
+		zipWebInfJar(zipName, files);
+	}
+
+	protected void rebuildWebXml() {
+		String portalWebDir = PortalUtil.getPortalWebDir();
+		resetPortalFileBackup(portalWebDir + "WEB-INF/web.xml");
+
+		Set<ServletContext> ctxs = ExtRegistry.getServletContexts();
+		for (ServletContext servletContext : ctxs) {
+			String pluginWebXML = servletContext.getRealPath("WEB-INF/ext-web/docroot/WEB-INF/web.xml");
+			if (!FileUtil.exists(pluginWebXML)) {
+				if (_log.isDebugEnabled()) {
+					_log.debug("Ext Plugin's web.xml not found for " + servletContext.getServletContextName());
+				}
+				return;
+			}
+			if (_log.isDebugEnabled()) {
+				_log.debug("Rebuilding portal's web.xml using " + pluginWebXML);
+			}
+
+			rebuildWebXml(pluginWebXML);
+		}
+	}
+
+
+	protected void rebuildWebXml(String pluginWebXMLFileName) {
+		String portalWebDir = PortalUtil.getPortalWebDir();
 		String tmpDir =
 			SystemProperties.get(SystemProperties.TMP_DIR) + StringPool.SLASH +
 				Time.getTimestamp();
@@ -234,7 +346,7 @@ public class ExtHotDeployListener extends BaseHotDeployListener {
 		WebXMLBuilder.main(
 			new String[] {
 				portalWebDir + "WEB-INF/web.xml",
-				pluginWebDir + "WEB-INF/ext-web/docroot/WEB-INF/web.xml",
+				pluginWebXMLFileName,
 				tmpDir + "/web.xml"
 			});
 
@@ -243,12 +355,230 @@ public class ExtHotDeployListener extends BaseHotDeployListener {
 
 		tmpWebXml.setLastModified(portalWebXml.lastModified());
 
+		File originalWebXml = new File(portalWebDir + "WEB-INF", "web.xml.original");
+		FileUtil.copyFile(portalWebXml, originalWebXml);
+		originalWebXml.setLastModified(portalWebXml.lastModified());
+
 		CopyTask.copyFile(
 			tmpWebXml, new File(portalWebDir + "WEB-INF"), true, true);
 
 		FileUtil.deltree(tmpDir);
 	}
 
-	private static Log _log = LogFactoryUtil.getLog(ExtHotDeployListener.class);
 
-}
\ No newline at end of file
+
+	protected void rebuildPortalExtPluginProperties() throws Exception {
+		File extPluginPropsFile = new File(PortalUtil.getPortalWebDir() + "WEB-INF/classes/portal-ext-plugin.properties");
+		extPluginPropsFile.delete();
+		extPluginPropsFile.createNewFile();
+		Set<ServletContext> ctxs = ExtRegistry.getServletContexts();
+		for (ServletContext servletContext : ctxs) {
+			URL pluginPropsURL = servletContext.getResource("WEB-INF/ext-web/docroot/WEB-INF/classes/portal-ext.properties");
+			if (pluginPropsURL == null) {
+				if (_log.isDebugEnabled()) {
+					_log.debug("Ext Plugin's portal-ext.properties not found");
+				}
+				return;
+			}
+			if (_log.isDebugEnabled()) {
+				_log.debug("Loading portal-ext.properties from " + pluginPropsURL);
+			}
+			rebuildPortalExtPluginProperties(pluginPropsURL);
+		}
+	}
+
+	private void rebuildPortalExtPluginProperties(URL pluginPropsURL) throws Exception {
+		PropertiesConfiguration pluginProps = new PropertiesConfiguration(pluginPropsURL);
+
+		PropertiesConfiguration portalProps = new PropertiesConfiguration(this.getClass().getClassLoader().getResource("portal.properties"));
+
+		File extPluginPropsFile = new File(PortalUtil.getPortalWebDir() + "WEB-INF/classes/portal-ext-plugin.properties");
+		PropertiesConfiguration extPluginPortalProps = new PropertiesConfiguration();
+		if (extPluginPropsFile.exists()) {
+			extPluginPortalProps.load(extPluginPropsFile);
+		}
+
+		for (Iterator it = pluginProps.getKeys(); it.hasNext();) {
+			String key = (String) it.next();
+			List value = pluginProps.getList(key);
+			if (key.endsWith("+")) {
+				key = key.substring(0, key.length() - 1);
+				List newValue = new ArrayList();
+				if (extPluginPortalProps.containsKey(key)) {
+					// already rewrited
+					newValue.addAll(extPluginPortalProps.getList(key));
+				} else {
+					newValue.addAll(portalProps.getList(key));
+				}
+
+				newValue.addAll(value);
+				extPluginPortalProps.setProperty(key, newValue);
+			} else {
+				extPluginPortalProps.setProperty(key, value);
+			}
+		}
+
+		extPluginPortalProps.save(extPluginPropsFile);
+	}
+
+	protected void rebuildServiceJS() throws Exception {
+		String portalWebDir = PortalUtil.getPortalWebDir();
+		resetPortalFileBackup(portalWebDir + "html/js/liferay/service.js");
+
+		for (ServletContext servletContex : ExtRegistry.getServletContexts()) {
+			rebuildServiceJS(portalWebDir, servletContex);
+		}
+	}
+
+	private void rebuildServiceJS(String portalWebDir, ServletContext servletContext) throws Exception {
+		URL pluginJSURL = servletContext.getResource("WEB-INF/ext-web/docroot/html/js/liferay/service.js");
+		if (pluginJSURL == null) {
+			if (_log.isDebugEnabled()) {
+				_log.debug("Ext Plugin's service.js not found for "
+					+ servletContext.getServletContextName());
+			}
+			return;
+		}
+		if (_log.isDebugEnabled()) {
+			_log.debug("Loading service.js from " + pluginJSURL);
+		}
+		// append
+		FileOutputStream portalJS = new FileOutputStream(portalWebDir + "html/js/liferay/service.js", true);
+		try {
+			InputStream pluginJS = new UrlResource(pluginJSURL).getInputStream();
+			try {
+				byte[] buff = new byte[4096];
+				int len = 0;
+				portalJS.write(new byte[]{13, 10});
+				while((len = pluginJS.read(buff)) != -1){
+					portalJS.write(buff, 0, len);
+				}
+				portalJS.write(new byte[]{13, 10});
+			} finally {
+				pluginJS.close();
+			}
+		} finally {
+			portalJS.close();
+		}
+		
+	}
+
+	private void resetPortalFileBackup(String portalFileName) {
+		resetPortalFileBackup(portalFileName, portalFileName);
+	}
+	private void resetPortalFileBackup(String portalFileName, String currentFileName) {
+		File backupFile = new File(portalFileName + BACKUP_EXT);
+		File currentFile = new File(currentFileName);
+		if(!currentFile.exists()){
+			return;
+		}
+		if (!backupFile.exists()) {
+			FileUtil.copyFile(currentFile, backupFile);
+			backupFile.setLastModified(currentFile.lastModified());
+		} else {
+			FileUtil.copyFile(backupFile, currentFile);
+			currentFile.setLastModified(backupFile.lastModified());
+		}
+	}
+
+	protected void uninstallExt(String servletContextName) throws Exception {
+		uninstallJars(servletContextName);
+		uninstallWebInfJar(servletContextName);
+		uninstallWebFiles(servletContextName);
+
+		ExtRegistry.unregisterExt(servletContextName);
+
+		rebuildPortalExtPluginProperties();
+		rebuildServiceJS();
+		rebuildWebXml();
+
+		FileUtil.delete(PortalUtil.getPortalWebDir() +
+			"WEB-INF/ext-" + servletContextName + ".xml");
+	}
+
+	protected void uninstallJars(String servletContextName)
+			throws Exception {
+		String globalLibDir = PortalUtil.getGlobalLibDir();
+		String portalLibDir = PortalUtil.getPortalLibDir();
+
+		for (String jarName : ExtRegistry.EXT_PLUGIN_JARS_GLOBAL_CL) {
+			removeJar(servletContextName, globalLibDir, jarName);
+		}
+		for (String jarName : ExtRegistry.EXT_PLUGIN_JARS_PORTAL_CL) {
+			removeJar(servletContextName, portalLibDir, jarName);
+		}
+	}
+	protected void removeJar(
+			String servletContextName, String dir, String jarName)
+			throws Exception {
+
+		String newJarFullName =
+				dir + "ext-" + servletContextName + jarName.substring(3) + ".jar";
+
+		FileUtil.delete(newJarFullName);
+	}
+	protected void uninstallWebFiles(String servletContextName) {
+		String portalWebDir = PortalUtil.getPortalWebDir();
+				HookHotDeployListener hookListener = new HookHotDeployListener();
+
+		Set<String> files = ExtRegistry.getFiles(servletContextName);
+		for(String file : files){
+			if(file.startsWith("ext-web/docroot/") &&
+				!ExtRegistry.isMergedFile(file)) {
+
+				String relativeFile = file.substring(
+					file.indexOf("docroot/") + "docroot/".length());
+
+				File portalFile = new File(portalWebDir, relativeFile);
+				File hookPortalFile = hookListener.getPortalJspBackupFile(portalFile);
+				if(hookPortalFile.exists()){
+					resetPortalFileBackup(portalFile.getAbsolutePath(), hookPortalFile.getAbsolutePath());
+				} else {
+					resetPortalFileBackup(portalFile.getAbsolutePath());
+					if(!FileUtil.exists(portalFile + BACKUP_EXT)){
+						FileUtil.delete(portalFile + BACKUP_EXT);
+					}
+				}
+			}
+		}
+	}
+	protected void uninstallWebInfJar(String servletContextName) throws Exception {
+		String portalLibDir = PortalUtil.getPortalLibDir();
+		removeJar(servletContextName, portalLibDir, "ext-webinf");
+	}
+
+	private void zipWebInfJar(String zipName, File[] files) throws Exception{
+		byte[] buffer = new byte[4096]; // Create a buffer for copying
+		int bytesRead;
+
+		ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipName));
+		try {
+			for (int i = 0; i < files.length; i++) {
+				File f = files[i];
+				if (f.isDirectory()) {
+					continue;
+				}
+
+				String fileName = "WEB-INF/" + f.getName();
+				FileInputStream in = new FileInputStream(f); // Stream to read file
+				try {
+					ZipEntry entry = new ZipEntry(fileName); // Make a ZipEntry
+					out.putNextEntry(entry); // Store entry
+					while ((bytesRead = in.read(buffer)) != -1) {
+						out.write(buffer, 0, bytesRead);
+					}
+				} finally {
+					in.close();
+				}
+			}
+		} finally {
+			out.close();
+		}
+	}
+
+
+	private static Log _log = LogFactoryUtil.getLog(ExtHotDeployListener.class);
+	private static List<String> _redeployServletContextNames =
+			new ArrayList<String>();
+	private static String BACKUP_EXT = ".beforeExt";
+}
Index: portal-impl/src/com/liferay/portal/language/LanguageResources.java
===================================================================
--- portal-impl/src/com/liferay/portal/language/LanguageResources.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/language/LanguageResources.java	(working copy)
@@ -29,6 +29,7 @@ import java.io.InputStream;
 import java.net.URL;
 
 import java.util.Collections;
+import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
@@ -186,23 +187,29 @@ public class LanguageResources {
 		try {
 			ClassLoader classLoader = LanguageResources.class.getClassLoader();
 
-			URL url = classLoader.getResource(name);
-
-			if (_log.isInfoEnabled()) {
-				_log.info("Attempting to load " + name);
+			Enumeration<URL> urls = classLoader.getResources(name);
+			if (_log.isDebugEnabled() && !urls.hasMoreElements()) {
+				_log.debug("No " + name + " has been found");
 			}
+			while (urls.hasMoreElements()) {
+				URL url = urls.nextElement();
 
-			if (url != null) {
-				InputStream inputStream = url.openStream();
+				if (_log.isInfoEnabled()) {
+					_log.info("Attempting to load " + name);
+				}
 
-				properties = PropertiesUtil.load(inputStream, StringPool.UTF8);
+				if (url != null) {
+					InputStream inputStream = url.openStream();
 
-				inputStream.close();
+					properties = PropertiesUtil.load(inputStream, StringPool.UTF8);
 
-				if (_log.isInfoEnabled()) {
-					_log.info(
-						"Loading " + url + " with " + properties.size() +
-							" values");
+					inputStream.close();
+
+					if (_log.isInfoEnabled()) {
+						_log.info(
+							"Loading " + url + " with " + properties.size() +
+								" values");
+					}
 				}
 			}
 		}
@@ -221,4 +228,4 @@ public class LanguageResources {
 	private static Map<Locale, Map<String, String>> _languageMaps =
 		new ConcurrentHashMap<Locale, Map<String, String>>(64);
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/com/liferay/portal/model/ModelHintsImpl.java
===================================================================
--- portal-impl/src/com/liferay/portal/model/ModelHintsImpl.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/model/ModelHintsImpl.java	(working copy)
@@ -29,9 +29,11 @@ import com.liferay.portal.service.ClassNameLocalServiceUtil;
 import com.liferay.portal.util.PropsUtil;
 
 import java.io.InputStream;
+import java.net.URL;
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
@@ -40,6 +42,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.TreeSet;
+import org.springframework.core.io.UrlResource;
 
 /**
  * @author Brian Wing Shun Chan
@@ -59,8 +62,28 @@ public class ModelHintsImpl implements ModelHints {
 				PropsUtil.get(PropsKeys.MODEL_HINTS_CONFIGS));
 
 			for (int i = 0; i < configs.length; i++) {
-				read(classLoader, configs[i]);
+				if(!configs[i].startsWith("classpath*:")){
+					read(classLoader, configs[i]);
+				} else {
+					String configName = configs[i].substring("classpath*:".length());
+					Enumeration<URL> resources = classLoader.getResources(configName);
+					if (_log.isDebugEnabled() && !resources.hasMoreElements()) {
+						_log.debug("No " + configName + " has been found");
+					}
+					while (resources.hasMoreElements()) {
+						URL resource = resources.nextElement();
+						if(_log.isDebugEnabled()){
+							_log.debug("Loading "+configName+" from: " + resource);
+						}
+						InputStream is = new UrlResource(resource).getInputStream();
+
+						if (is != null) {
+							read(classLoader, resource.toString(), is);
+						}
+					}
+				}
 			}
+
 		}
 		catch (Exception e) {
 			_log.error(e, e);
@@ -191,8 +214,10 @@ public class ModelHintsImpl implements ModelHints {
 	}
 
 	public void read(ClassLoader classLoader, String source) throws Exception {
-		InputStream is = classLoader.getResourceAsStream(source);
+		read(classLoader, source, classLoader.getResourceAsStream(source));
+	}
 
+	public void read(ClassLoader classLoader, String source, InputStream is) throws Exception {
 		if (is == null) {
 			if (_log.isWarnEnabled()) {
 				_log.warn("Cannot load " + source);
@@ -419,4 +444,4 @@ public class ModelHintsImpl implements ModelHints {
 	private Set<String> _models;
 	private SAXReader _saxReader;
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/com/liferay/portal/service/impl/LayoutTemplateLocalServiceImpl.java
===================================================================
--- portal-impl/src/com/liferay/portal/service/impl/LayoutTemplateLocalServiceImpl.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/service/impl/LayoutTemplateLocalServiceImpl.java	(working copy)
@@ -40,8 +40,11 @@ import com.liferay.portal.util.PropsValues;
 import com.liferay.portlet.layoutconfiguration.util.velocity.InitColumnProcessor;
 
 import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
 
 import java.util.ArrayList;
+import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
@@ -50,6 +53,8 @@ import java.util.Map;
 import java.util.Set;
 
 import javax.servlet.ServletContext;
+import org.apache.commons.io.IOUtils;
+import org.springframework.core.io.UrlResource;
 
 /**
  * @author Ivica Cardic
@@ -287,6 +292,51 @@ public class LayoutTemplateLocalServiceImpl
 					}
 				}
 			}
+
+			Set<ObjectValuePair<String, Boolean>> curLayoutTemplateIds =
+				new HashSet<ObjectValuePair<String, Boolean>>();
+
+			ClassLoader classLoader = getClass().getClassLoader();
+			// load xmls
+			String resourceName = "WEB-INF/liferay-layout-templates-ext.xml";
+			Enumeration<URL> resources = classLoader.getResources(resourceName);
+			if (_log.isDebugEnabled() && !resources.hasMoreElements()) {
+				_log.debug("No " + resourceName + " has been found");
+			}
+			while (resources.hasMoreElements()) {
+				URL resource = resources.nextElement();
+				if (_log.isDebugEnabled()) {
+					_log.debug("Loading " + resourceName + " from: " + resource);
+				}
+
+				if (resource == null) {
+					continue;
+				}
+
+				InputStream is = new UrlResource(resource).getInputStream();
+				try {
+					String xmlExt = IOUtils.toString(is, "UTF-8");
+					curLayoutTemplateIds.addAll(
+						_readLayoutTemplates(
+							servletContextName, servletContext, xmlExt,
+							pluginPackage));
+				} catch (Exception e) {
+					_log.error("Problem while loading file " + resource, e);
+				} finally {
+					is.close();
+				}
+			}
+
+			Iterator<ObjectValuePair<String, Boolean>> itr =
+				curLayoutTemplateIds.iterator();
+
+			while (itr.hasNext()) {
+				ObjectValuePair<String, Boolean> ovp = itr.next();
+
+				if (!layoutTemplateIds.contains(ovp)) {
+					layoutTemplateIds.add(ovp);
+				}
+			}
 		}
 		catch (Exception e) {
 			_log.error(e, e);
Index: portal-impl/src/com/liferay/portal/service/impl/PortletLocalServiceImpl.java
===================================================================
--- portal-impl/src/com/liferay/portal/service/impl/PortletLocalServiceImpl.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/service/impl/PortletLocalServiceImpl.java	(working copy)
@@ -78,8 +78,11 @@ import com.liferay.util.ContentUtil;
 import com.liferay.util.bridges.mvc.MVCPortlet;
 
 import java.io.File;
+import java.io.InputStream;
+import java.net.URL;
 
 import java.util.ArrayList;
+import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -95,6 +98,8 @@ import javax.portlet.PreferencesValidator;
 import javax.portlet.WindowState;
 
 import javax.servlet.ServletContext;
+import org.apache.commons.io.IOUtils;
+import org.springframework.core.io.UrlResource;
 
 /**
  * @author Brian Wing Shun Chan
@@ -570,6 +575,10 @@ public class PortletLocalServiceImpl extends PortletLocalServiceBaseImpl {
 				_readPortletXML(
 					servletContext, xmls[1], portletsPool, servletURLPatterns,
 					pluginPackage));
+			portletIds.addAll(
+				_readPortletExtXML(
+					servletContext, portletsPool, servletURLPatterns,
+					pluginPackage));
 
 			Set<String> liferayPortletIds =
 				_readLiferayPortletXML(xmls[2], portletsPool);
@@ -577,6 +586,9 @@ public class PortletLocalServiceImpl extends PortletLocalServiceBaseImpl {
 			liferayPortletIds.addAll(
 				_readLiferayPortletXML(xmls[3], portletsPool));
 
+			liferayPortletIds.addAll(
+				_readLiferayPortletExtXML(portletsPool));
+
 			// Check for missing entries in liferay-portlet.xml
 
 			for (String portletId : portletIds) {
@@ -970,6 +982,40 @@ public class PortletLocalServiceImpl extends PortletLocalServiceBaseImpl {
 		_readLiferayDisplay(
 			servletContextName, rootElement, portletCategory, portletIds);
 
+		if(servletContextName == null){
+			ClassLoader classLoader = getClass().getClassLoader();
+			String resourceName = "WEB-INF/liferay-display-ext.xml";
+			Enumeration<URL> resources = classLoader.getResources(resourceName);
+			if (_log.isDebugEnabled() && !resources.hasMoreElements()) {
+				_log.debug("No " + resourceName + " has been found");
+			}
+			while (resources.hasMoreElements()) {
+				URL resource = resources.nextElement();
+				if (_log.isDebugEnabled()) {
+					_log.debug("Loading " + resourceName + " from: " + resource);
+				}
+
+				if(resource == null){
+					continue;
+				}
+
+				InputStream is = new UrlResource(resource).getInputStream();
+				try {
+					String xmlExt = IOUtils.toString(is, "UTF-8");
+					Document extDoc = SAXReaderUtil.read(xmlExt, true);
+
+					Element extRootElement = extDoc.getRootElement();
+
+					_readLiferayDisplay(
+							servletContextName, extRootElement, portletCategory, portletIds);
+				} catch(Exception e){
+					_log.error("Problem while loading file " + resource, e);
+				} finally {
+					is.close();
+				}
+			}
+			
+		}
 		// Portlets that do not belong to any categories should default to the
 		// Undefined category
 
@@ -1513,6 +1559,86 @@ public class PortletLocalServiceImpl extends PortletLocalServiceBaseImpl {
 		return liferayPortletIds;
 	}
 
+	private Set<String> _readLiferayPortletExtXML(Map<String, Portlet> portletsPool)
+		throws Exception {
+		
+		Set<String> result = new HashSet();
+		ClassLoader classLoader = getClass().getClassLoader();
+		// load xmls
+		String resourceName = "WEB-INF/liferay-portlet-ext.xml";
+		Enumeration<URL> resources = classLoader.getResources(resourceName);
+		if (_log.isDebugEnabled() && !resources.hasMoreElements()) {
+			_log.debug("No " + resourceName + " has been found");
+		}
+		while (resources.hasMoreElements()) {
+			URL resource = resources.nextElement();
+			if (_log.isDebugEnabled()) {
+				_log.debug("Loading " + resourceName + " from: " + resource);
+			}
+
+			if(resource == null){
+				continue;
+			}
+
+			InputStream is = new UrlResource(resource).getInputStream();
+			try {
+				String xmlExt = IOUtils.toString(is, "UTF-8");
+				result.addAll(_readLiferayPortletXML(xmlExt, portletsPool));
+			} catch(Exception e){
+				_log.error("Problem while loading file " + resource, e);
+			} finally {
+				is.close();
+			}
+		}
+
+
+		return result;
+	}
+
+
+	private Set<String> _readPortletExtXML(
+			ServletContext servletContext, 
+			Map<String, Portlet> portletsPool, Set<String> servletURLPatterns,
+			PluginPackage pluginPackage)
+		throws Exception {
+
+
+
+		Set<String> result = new HashSet();
+
+		ClassLoader classLoader = getClass().getClassLoader();
+		// load xmls
+		String resourceName = "WEB-INF/portlet-ext.xml";
+		Enumeration<URL> resources = classLoader.getResources(resourceName);
+		if (_log.isDebugEnabled() && !resources.hasMoreElements()) {
+			_log.debug("No " + resourceName + " has been found");
+		}
+		while (resources.hasMoreElements()) {
+			URL resource = resources.nextElement();
+			if (_log.isDebugEnabled()) {
+				_log.debug("Loading " + resourceName + " from: " + resource);
+			}
+
+			if(resource == null){
+				continue;
+			}
+
+			InputStream is = new UrlResource(resource).getInputStream();
+			try {
+				String xmlExt = IOUtils.toString(is, "UTF-8");
+				result.addAll(_readPortletXML(servletContext, xmlExt, portletsPool, servletURLPatterns, pluginPackage));
+			} catch(Exception e){
+				_log.error("Problem while loading file " + resource, e);
+			} finally {
+				is.close();
+			}
+		}
+
+
+		return result;
+
+	}
+
 	private Set<String> _readPortletXML(
 			ServletContext servletContext, String xml,
 			Map<String, Portlet> portletsPool, Set<String> servletURLPatterns,
@@ -2069,4 +2195,4 @@ public class PortletLocalServiceImpl extends PortletLocalServiceBaseImpl {
 	private static Map<String, Portlet> _portletsPool =
 		new ConcurrentHashMap<String, Portlet>();
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/com/liferay/portal/service/impl/ThemeLocalServiceImpl.java
===================================================================
--- portal-impl/src/com/liferay/portal/service/impl/ThemeLocalServiceImpl.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/service/impl/ThemeLocalServiceImpl.java	(working copy)
@@ -48,8 +48,11 @@ import com.liferay.portal.util.PropsValues;
 import com.liferay.util.ContextReplace;
 
 import java.io.File;
+import java.io.InputStream;
+import java.net.URL;
 
 import java.util.ArrayList;
+import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -59,6 +62,8 @@ import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 import javax.servlet.ServletContext;
+import org.apache.commons.io.IOUtils;
+import org.springframework.core.io.UrlResource;
 
 /**
  * @author Brian Wing Shun Chan
@@ -237,6 +242,44 @@ public class ThemeLocalServiceImpl extends ThemeLocalServiceBaseImpl {
 					}
 				}
 			}
+
+			Set<String> themeIds = new HashSet<String>();
+			ClassLoader classLoader = getClass().getClassLoader();
+			// load xmls
+			String resourceName = "WEB-INF/liferay-look-and-feel-ext.xml";
+			Enumeration<URL> resources = classLoader.getResources(resourceName);
+			if (_log.isDebugEnabled() && !resources.hasMoreElements()) {
+				_log.debug("No " + resourceName + " has been found");
+			}
+			while (resources.hasMoreElements()) {
+				URL resource = resources.nextElement();
+				if (_log.isDebugEnabled()) {
+					_log.debug("Loading " + resourceName + " from: " + resource);
+				}
+
+				if (resource == null) {
+					continue;
+				}
+
+				InputStream is = new UrlResource(resource).getInputStream();
+				try {
+					String xmlExt = IOUtils.toString(is, "UTF-8");
+					themeIds.addAll(_readThemes(
+						servletContextName, servletContext, themesPath,
+						loadFromServletContext, xmlExt, pluginPackage));
+				} catch (Exception e) {
+					_log.error("Problem while loading file " + resource, e);
+				} finally {
+					is.close();
+				}
+			}
+
+			for (String themeId : themeIds) {
+				if (!themeIdsList.contains(themeId)) {
+					themeIdsList.add(themeId);
+				}
+			}
+
 		}
 		catch (Exception e) {
 			e.printStackTrace();
Index: portal-impl/src/com/liferay/portal/servlet/MainServlet.java
===================================================================
--- portal-impl/src/com/liferay/portal/servlet/MainServlet.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/servlet/MainServlet.java	(working copy)
@@ -94,6 +94,10 @@ import com.liferay.util.servlet.DynamicServletRequest;
 import com.liferay.util.servlet.EncryptedServletRequest;
 
 import java.io.IOException;
+import java.io.InputStream;
+
+import java.net.URL;
+import java.util.Enumeration;
 
 import java.util.Iterator;
 import java.util.List;
@@ -106,10 +110,12 @@ import javax.portlet.PortletException;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
+import javax.servlet.UnavailableException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 import javax.servlet.jsp.PageContext;
+import org.apache.commons.digester.Digester;
 
 import org.apache.struts.Globals;
 import org.apache.struts.action.ActionServlet;
@@ -117,6 +123,8 @@ import org.apache.struts.action.RequestProcessor;
 import org.apache.struts.config.ControllerConfig;
 import org.apache.struts.config.ModuleConfig;
 import org.apache.struts.tiles.TilesUtilImpl;
+import org.springframework.core.io.UrlResource;
+import org.xml.sax.InputSource;
 
 /**
  * @author Brian Wing Shun Chan
@@ -351,6 +359,67 @@ public class MainServlet extends ActionServlet {
 		}
 	}
 
+	@Override
+	protected void initOther() throws ServletException {
+		super.initOther();
+
+		StringBuilder sb = new StringBuilder(super.config);
+
+		ClassLoader portalClassLoader = com.liferay.portal.kernel.util.PortalClassLoaderUtil.getClassLoader();
+		try {
+			String resourceName = "WEB-INF/struts-config-ext.xml";
+			Enumeration<URL> urls = portalClassLoader.getResources(resourceName);
+			if (_log.isDebugEnabled() && !urls.hasMoreElements()) {
+				_log.debug("No " + resourceName + " has been found");
+			}
+			while (urls.hasMoreElements()) {
+				URL url = urls.nextElement();
+				if (_log.isDebugEnabled()) {
+					_log.debug("Loading " + resourceName + " from " + url);
+				}
+				sb.append(",\u2604" + url.toString().replaceAll(",", "\u2615")); // path should not contain ','
+			}
+		} catch (IOException ex) {
+			_log.error("Problem with loading struts config files: " + ex.getMessage(), ex);
+		}
+
+		super.config = sb.toString();
+	}
+
+	@Override
+	protected void parseModuleConfigFile(Digester digester, String path)
+			throws UnavailableException {
+
+		if (!path.contains("\u2604")) {
+			super.parseModuleConfigFile(digester, path);
+			return;
+		}
+
+		try {
+			URL url = new URL(path.substring("\u2604".length()).replaceAll("\u2615", ",")); // replace back the ',' character
+
+			InputStream is = new UrlResource(url).getInputStream();
+			try {
+				InputSource xmlStream = new InputSource(url.toExternalForm());
+				xmlStream.setByteStream(is);
+				digester.parse(is);
+			} catch (Exception e) {
+				_log.error("Cannot load Ext struts config file: " + url, e);
+			} finally {
+				if (is != null) {
+					try {
+						is.close();
+					} catch (IOException e) {
+						_log.error("Cannot close stream to the struts config file: " + url, e);
+					}
+				}
+			}
+		} catch (Exception e) {
+			_log.error("Cannot load Ext Struts config files: " + e.getMessage(), e);
+		}
+
+	}
+
 	public void service(
 			HttpServletRequest request, HttpServletResponse response)
 		throws IOException, ServletException {
@@ -1202,4 +1271,4 @@ public class MainServlet extends ActionServlet {
 
 	private static Log _log = LogFactoryUtil.getLog(MainServlet.class);
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/com/liferay/portal/spring/context/PortalApplicationContext.java
===================================================================
--- portal-impl/src/com/liferay/portal/spring/context/PortalApplicationContext.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/spring/context/PortalApplicationContext.java	(working copy)
@@ -25,6 +25,7 @@ import java.util.List;
 
 import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
 import org.springframework.core.io.DefaultResourceLoader;
+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
 import org.springframework.web.context.support.XmlWebApplicationContext;
 
 /**
@@ -65,6 +66,7 @@ public class PortalApplicationContext extends XmlWebApplicationContext {
 			configLocations.remove("META-INF/jpa-spring.xml");
 		}
 
+		reader.setResourceLoader(new PathMatchingResourcePatternResolver());
 		for (String configLocation : configLocations) {
 			try {
 				reader.loadBeanDefinitions(configLocation);
@@ -87,4 +89,4 @@ public class PortalApplicationContext extends XmlWebApplicationContext {
 	private static Log _log = LogFactoryUtil.getLog(
 		PortalApplicationContext.class);
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/com/liferay/portal/spring/hibernate/PortalHibernateConfiguration.java
===================================================================
--- portal-impl/src/com/liferay/portal/spring/hibernate/PortalHibernateConfiguration.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/spring/hibernate/PortalHibernateConfiguration.java	(working copy)
@@ -27,12 +27,15 @@ import com.liferay.portal.util.PropsUtil;
 import com.liferay.portal.util.PropsValues;
 
 import java.io.InputStream;
+import java.net.URL;
+import java.util.Enumeration;
 
 import java.util.Map;
 import java.util.Properties;
 
 import org.hibernate.cfg.Configuration;
 import org.hibernate.cfg.Environment;
+import org.springframework.core.io.UrlResource;
 
 import org.springframework.orm.hibernate3.LocalSessionFactoryBean;
 
@@ -134,7 +137,42 @@ public class PortalHibernateConfiguration extends LocalSessionFactoryBean {
 
 		ClassLoader classLoader = getConfigurationClassLoader();
 
-		InputStream is = classLoader.getResourceAsStream(resource);
+		if(!resource.startsWith("classpath*:")){
+			InputStream is = classLoader.getResourceAsStream(resource);
+			readResource(configuration, resource, is);
+		} else {
+			String resourceName = resource.substring("classpath*:".length());
+			try {
+				Enumeration<URL> resources = 
+					classLoader.getResources(resourceName);
+					if (_log.isDebugEnabled() && !resources.hasMoreElements()) {
+						_log.debug("No " + resourceName + " has been found");
+					}
+				while (resources.hasMoreElements()) {
+					URL resourceFullName = resources.nextElement();
+					try {
+						InputStream is = new UrlResource(resourceFullName).getInputStream();
+						readResource(configuration, resource, is);
+					}
+					catch (Exception e2) {
+						if (_log.isWarnEnabled()) {
+							_log.warn("Problem while loading " + resource, e2);
+						}
+					}
+				}
+			}
+			catch (Exception e2) {
+				if (_log.isWarnEnabled()) {
+					_log.warn("Problem while loading classLoader resources: " 
+						+ resourceName, e2);
+				}
+			}
+		}
+
+	}
+
+	protected void readResource(Configuration configuration, String resource, InputStream is)
+		throws Exception {
 
 		if (is == null) {
 			return;
@@ -162,4 +200,4 @@ public class PortalHibernateConfiguration extends LocalSessionFactoryBean {
 
 	private Converter<String> _hibernateConfigurationConverter;
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/com/liferay/portal/spring/servlet/RemotingServlet.java
===================================================================
--- portal-impl/src/com/liferay/portal/spring/servlet/RemotingServlet.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/spring/servlet/RemotingServlet.java	(working copy)
@@ -41,7 +41,7 @@ public class RemotingServlet extends DispatcherServlet {
 		TunnelApplicationContext.class.getName();
 
 	public static final String CONTEXT_CONFIG_LOCATION =
-		"/WEB-INF/remoting-servlet.xml,/WEB-INF/remoting-servlet-ext.xml";
+		"/WEB-INF/remoting-servlet.xml,classpath*:WEB-INF/remoting-servlet-ext.xml";
 
 	public Class<?> getContextClass() {
 		try {
@@ -100,4 +100,4 @@ public class RemotingServlet extends DispatcherServlet {
 
 	private static Log _log = LogFactoryUtil.getLog(RemotingServlet.class);
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/com/liferay/portal/util/ExtRegistry.java
===================================================================
--- portal-impl/src/com/liferay/portal/util/ExtRegistry.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/util/ExtRegistry.java	(working copy)
@@ -11,16 +11,17 @@
  * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
  * details.
  */
-
 package com.liferay.portal.util;
 
 import com.liferay.portal.kernel.xml.Document;
 import com.liferay.portal.kernel.xml.Element;
 import com.liferay.portal.kernel.xml.SAXReaderUtil;
+import java.io.File;
+import java.util.Arrays;
 
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.Iterator;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -33,25 +34,27 @@ import javax.servlet.ServletContext;
  */
 public class ExtRegistry {
 
+	public static Set<String> getFiles(String servletContextName){
+		return Collections.unmodifiableSet(_extMap.get(servletContextName).getFiles());
+	}
+
+	public static void unregisterExt(String servletContextName){
+		_extMap.remove(servletContextName);
+	}
 	public static Map<String, Set<String>> getConflicts(
 			ServletContext servletContext)
-		throws Exception {
+			throws Exception {
 
 		String servletContextName = servletContext.getServletContextName();
 
 		Set<String> files = _readExtFiles(
-			servletContext, "/WEB-INF/ext-" + servletContextName + ".xml");
-
-		Iterator<Map.Entry<String, Set<String>>> itr =
-			_extMap.entrySet().iterator();
+				servletContext, "/WEB-INF/ext-" + servletContextName + ".xml");
 
 		Map<String, Set<String>> conflicts = new HashMap<String, Set<String>>();
 
-		while (itr.hasNext()) {
-			Map.Entry<String, Set<String>> entry = itr.next();
-
-			String curServletContextName = entry.getKey();
-			Set<String> curFiles = entry.getValue();
+		for(ExtRegistryInfo regInfo : _extMap.values()){
+			String curServletContextName = regInfo.getServletContext().getServletContextName();
+			Set<String> curFiles = regInfo.getFiles();
 
 			for (String file : files) {
 				if (!curFiles.contains(file)) {
@@ -59,7 +62,7 @@ public class ExtRegistry {
 				}
 
 				Set<String> conflictFiles = conflicts.get(
-					curServletContextName);
+						curServletContextName);
 
 				if (conflictFiles == null) {
 					conflictFiles = new TreeSet<String>();
@@ -78,55 +81,76 @@ public class ExtRegistry {
 		return Collections.unmodifiableSet(_extMap.keySet());
 	}
 
+	public static Set<ServletContext> getServletContexts() {
+		Set<ServletContext> result = new HashSet<ServletContext>(_extMap.size());
+		for(ExtRegistryInfo info : _extMap.values()){
+			result.add(info.getServletContext());
+		}
+		return Collections.unmodifiableSet(result);
+	}
+
+	public static ServletContext getServletContext(String servletContextName) {
+		if(!isRegistered(servletContextName)){
+			return null;
+		}
+		return _extMap.get(servletContextName).getServletContext();
+	}
+
 	public static boolean isRegistered(String servletContextName) {
 		if (_extMap.containsKey(servletContextName)) {
 			return true;
-		}
-		else {
+		} else {
 			return false;
 		}
 	}
 
+	public static void updateRegisteredServletContext(ServletContext ctx){
+		String servletContextName = ctx.getServletContextName();
+		if(isRegistered(servletContextName)){
+			_extMap.get(servletContextName).setServletContext(ctx);
+		}
+	}
+
 	public static void registerExt(ServletContext servletContext)
-		throws Exception {
+			throws Exception {
 
 		String servletContextName = servletContext.getServletContextName();
 
 		Set<String> files = _readExtFiles(
-			servletContext, "/WEB-INF/ext-" + servletContextName + ".xml");
+				servletContext, "/WEB-INF/ext-" + servletContextName + ".xml");
 
-		_extMap.put(servletContextName, files);
+		_extMap.put(servletContextName, new ExtRegistryInfo(servletContext, files));
 	}
 
 	public static void registerPortal(ServletContext servletContext)
-		throws Exception {
+			throws Exception {
 
 		Set<String> resourcePaths = servletContext.getResourcePaths(
-			"/WEB-INF");
+				"/WEB-INF");
 
 		for (String resourcePath : resourcePaths) {
-			if (resourcePath.startsWith("/WEB-INF/ext-") &&
-				resourcePath.endsWith("-ext.xml")) {
+			if (resourcePath.startsWith("/WEB-INF/ext-")
+					&& resourcePath.endsWith("-ext.xml")) {
 
 				String servletContextName = resourcePath.substring(
-					13, resourcePath.length() - 4);
+						13, resourcePath.length() - 4);
 
 				Set<String> files = _readExtFiles(
-					servletContext, resourcePath);
+						servletContext, resourcePath);
 
-				_extMap.put(servletContextName, files);
+				_extMap.put(servletContextName, new ExtRegistryInfo(null, files));
 			}
 		}
 	}
 
 	private static Set<String> _readExtFiles(
 			ServletContext servletContext, String resourcePath)
-		throws Exception {
+			throws Exception {
 
 		Set<String> files = new TreeSet<String>();
 
 		Document document = SAXReaderUtil.read(
-			servletContext.getResourceAsStream(resourcePath));
+				servletContext.getResourceAsStream(resourcePath));
 
 		Element rootElement = document.getRootElement();
 
@@ -135,13 +159,85 @@ public class ExtRegistry {
 		List<Element> fileElements = filesElement.elements("file");
 
 		for (Element fileElement : fileElements) {
-			files.add(fileElement.getText());
+			String fileName = fileElement.getText();
+			if (!isMergedFile(fileName)) {
+				files.add(fileName);
+			}
 		}
 
 		return files;
 	}
 
-	private static Map<String, Set<String>> _extMap =
-		new HashMap<String, Set<String>>();
+	public static boolean isMergedFile(String name) {
+		for (String mergedFile : SUPPORTED_MERGING_FILES) {
+			if (name.contains(mergedFile)) {
+				return true;
+			}
+		}
+		return false;
+	}
+	private static Map<String, ExtRegistryInfo> _extMap =
+		new HashMap<String, ExtRegistryInfo>();
+	public static final List<String> SUPPORTED_MERGING_FILES = 
+		Arrays.asList(new String[]{
+			"tiles-defs-ext.xml",
+			"struts-config-ext.xml",
+			"ext-model-hints.xml",
+			"ext-spring.xml",
+			"ext-hbm.xml",
+			"liferay-portlet-ext.xml",
+			"liferay-look-and-feel-ext.xml",
+			"liferay-layout-templates-ext.xml",
+			"portlet-ext.xml",
+			"liferay-display-ext.xml",
+			"remoting-servlet-ext.xml",
+			"portal-log4j-ext.xml",
+			"log4j.dtd",
+			"content"+File.separator+"Language-ext",
+			"ext-orm.xml",
+			"web.xml",
+			"service.xml",
+			"portal-ext.properties",
+			"sql"+File.separator,
+			"html"+File.separator+"js"+File.separator+"liferay"+
+				File.separator+"service.js"
+		});
+	public static final List<String> EXT_PLUGIN_JARS_GLOBAL_CL = 
+		Arrays.asList(new String[]{
+			"ext-service"
+		});
+	public static final List<String> EXT_PLUGIN_JARS_PORTAL_CL = 
+		Arrays.asList(new String[]{
+			"ext-impl",
+			"ext-util-bridges",
+			"ext-util-java",
+			"ext-util-taglib"
+		});
+}
+
+class ExtRegistryInfo {
+	private ServletContext servletContext;
+	private Set<String> files;
+
+	public ExtRegistryInfo(ServletContext servletContext, Set<String> files) {
+		this.servletContext = servletContext;
+		this.files = files;
+	}
+
+	public Set<String> getFiles() {
+		return files;
+	}
+
+	public void setFiles(Set<String> files) {
+		this.files = files;
+	}
+
+	public ServletContext getServletContext() {
+		return servletContext;
+	}
+
+	public void setServletContext(ServletContext servletContext) {
+		this.servletContext = servletContext;
+	}
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/com/liferay/portal/util/InitUtil.java
===================================================================
--- portal-impl/src/com/liferay/portal/util/InitUtil.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/util/InitUtil.java	(working copy)
@@ -22,6 +22,7 @@ import com.liferay.portal.kernel.cache.CacheRegistryUtil;
 import com.liferay.portal.kernel.configuration.ConfigurationFactoryUtil;
 import com.liferay.portal.kernel.dao.db.DBFactoryUtil;
 import com.liferay.portal.kernel.dao.jdbc.DataSourceFactoryUtil;
+import com.liferay.portal.kernel.log.Log;
 import com.liferay.portal.kernel.log.LogFactoryUtil;
 import com.liferay.portal.kernel.util.GetterUtil;
 import com.liferay.portal.kernel.util.JavaProps;
@@ -36,6 +37,9 @@ import com.liferay.util.log4j.Log4JUtil;
 
 import com.sun.syndication.io.XmlReader;
 
+import java.net.URL;
+import java.util.Enumeration;
+
 import org.apache.commons.lang.time.StopWatch;
 
 /**
@@ -93,8 +97,23 @@ public class InitUtil {
 
 			Log4JUtil.configureLog4J(
 				classLoader.getResource("META-INF/portal-log4j.xml"));
-			Log4JUtil.configureLog4J(
-				classLoader.getResource("META-INF/portal-log4j-ext.xml"));
+			try {
+				Log _log = LogFactoryUtil.getLog(InitUtil.class);
+
+				String configName = "META-INF/portal-log4j-ext.xml";
+				Enumeration<URL> configs = 
+					classLoader.getResources(configName);
+				if (_log.isDebugEnabled() && !configs.hasMoreElements()) {
+					_log.debug("No " + configName + " has been found");
+				}
+				while (configs.hasMoreElements()) {
+					URL config = configs.nextElement();
+					Log4JUtil.configureLog4J(config);
+				}
+			}
+			catch (Exception e) {
+				e.printStackTrace();
+			}
 		}
 
 		// Shared log
@@ -171,4 +190,4 @@ public class InitUtil {
 	private static boolean _initialized;
 	private static boolean _neverInitialized = true;
 
-}
\ No newline at end of file
+}
Index: portal-impl/src/portal.properties
===================================================================
--- portal-impl/src/portal.properties	(revision 80606)
+++ portal-impl/src/portal.properties	(working copy)
@@ -10,6 +10,8 @@
     # The default read order is: portal.properties, portal-bundle.properties,
     # and then portal-ext.properties.
     #
+    include-and-override=portal-ext-plugin.properties
+    include-and-override=${liferay.home}/portal-ext-plugin.properties
     include-and-override=portal-bundle.properties
     include-and-override=${liferay.home}/portal-bundle.properties
     include-and-override=portal-ext.properties
@@ -585,7 +587,7 @@
     #
     model.hints.configs=\
         META-INF/portal-model-hints.xml,\
-        META-INF/ext-model-hints.xml,\
+        classpath*:META-INF/ext-model-hints.xml,\
         META-INF/portlet-model-hints.xml
 
 ##
@@ -657,7 +659,7 @@
         #META-INF/memcached-spring.xml,\
         #META-INF/monitoring-spring.xml,\
         \
-        META-INF/ext-spring.xml
+        classpath*:META-INF/ext-spring.xml
 
     #
     # Set the bean name for the Liferay data source.
@@ -701,7 +703,7 @@
         META-INF/document-library-hbm.xml,\
         META-INF/mail-hbm.xml,\
         META-INF/portal-hbm.xml,\
-        META-INF/ext-hbm.xml
+        classpath*:META-INF/ext-hbm.xml
 
     #
     # Liferay will automatically detect the Hibernate dialect in
@@ -798,7 +800,8 @@
     jpa.configs=\
         META-INF/document-library-orm.xml,\
         META-INF/mail-orm.xml,\
-        META-INF/portal-orm.xml
+        META-INF/portal-orm.xml,\
+        META-INF/ext-orm.xml
 
     #
     # Set the name of the JPA provider.
Index: portal-web/docroot/WEB-INF/struts-config.xml
===================================================================
--- portal-web/docroot/WEB-INF/struts-config.xml	(revision 80606)
+++ portal-web/docroot/WEB-INF/struts-config.xml	(working copy)
@@ -2600,5 +2600,6 @@
 	<plug-in className="com.liferay.portal.struts.PortalTilesPlugin">
 		<set-property property="definitions-config" value="/WEB-INF/tiles-defs.xml,/WEB-INF/tiles-defs-ext.xml" />
 		<set-property property="moduleAware" value="true" />
+		<set-property property="factoryClassname" value="com.liferay.portal.struts.PortalTilesDefinitionsFactory" />
 	</plug-in>
 </struts-config>
\ No newline at end of file
Index: portal-impl/src/com/liferay/portal/struts/PortalTilesDefinitionsFactory.java
===================================================================
--- portal-impl/src/com/liferay/portal/struts/PortalTilesDefinitionsFactory.java	(revision 80606)
+++ portal-impl/src/com/liferay/portal/struts/PortalTilesDefinitionsFactory.java	(working copy)
@@ -0,0 +1,668 @@
+/*
+ * $Id: I18nFactorySet.java 265658 2005-09-01 05:54:57Z niallp $
+ *
+ * Copyright 1999-2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * The changes described below are under the Copyright (c) 2010-2011 IBA CZ, s. r. o.
+ *
+ * The original file I18nFactorySet.java is copyrighted above.
+ *
+ * The file licence is changed from the Apache License, Version 2.0 to the
+ * MIT Licence, under the terms specified in the Apache Licence, Version 2.0.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package com.liferay.portal.struts;
+
+import com.liferay.portal.kernel.log.Log;
+import com.liferay.portal.kernel.log.LogFactoryUtil;
+import com.liferay.portal.kernel.util.PortalClassLoaderUtil;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.StringTokenizer;
+import javax.servlet.ServletContext;
+import javax.servlet.ServletRequest;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+import org.apache.struts.taglib.tiles.ComponentConstants;
+import org.apache.struts.tiles.DefinitionsFactoryException;
+import org.apache.struts.tiles.FactoryNotFoundException;
+import org.apache.struts.tiles.xmlDefinition.DefinitionsFactory;
+import org.apache.struts.tiles.xmlDefinition.XmlDefinitionsSet;
+import org.apache.struts.tiles.xmlDefinition.XmlParser;
+import org.springframework.core.io.UrlResource;
+import org.xml.sax.SAXException;
+
+public class PortalTilesDefinitionsFactory extends org.apache.struts.tiles.xmlDefinition.I18nFactorySet {
+
+/*###############
+
+FULL COPY of org.apache.struts.tiles.xmlDefinition.I18nFactorySet - we can't override private method parseXmlFiles :(
+
+changed - parseXmlFiles - added check for tiles-defs-ext.xml and call parseExtXmlFiles
+new method - parseExtXmlFiles - load ext tiles config files
+
+----------------
+
+Also we need to change struts-config.xml:
+
+	<plug-in className="com.liferay.portal.struts.PortalTilesPlugin">
+		<set-property property="definitions-config" value="/WEB-INF/tiles-defs.xml,/WEB-INF/tiles-defs-ext.xml" />
+		<set-property property="moduleAware" value="true" />
+		<set-property property="factoryClassname" value="com.liferay.portal.struts.PortalTilesDefinitionsFactory" />
+	</plug-in>
+*/
+
+
+    private static Log _log = LogFactoryUtil.getLog(PortalTilesDefinitionsFactory.class);
+    /**
+     * Config file parameter name.
+     */
+    public static final String DEFINITIONS_CONFIG_PARAMETER_NAME =
+        "definitions-config";
+
+    /**
+     * Config file parameter name.
+     */
+    public static final String PARSER_DETAILS_PARAMETER_NAME =
+        "definitions-parser-details";
+
+    /**
+     * Config file parameter name.
+     */
+    public static final String PARSER_VALIDATE_PARAMETER_NAME =
+        "definitions-parser-validate";
+
+    /**
+     * Possible definition filenames.
+     */
+    public static final String DEFAULT_DEFINITION_FILENAMES[] =
+        {
+            "/WEB-INF/tileDefinitions.xml",
+            "/WEB-INF/componentDefinitions.xml",
+            "/WEB-INF/instanceDefinitions.xml" };
+
+    /**
+     * Default filenames extension.
+     */
+    public static final String FILENAME_EXTENSION = ".xml";
+
+    /**
+     * Default factory.
+     */
+    protected DefinitionsFactory defaultFactory = null;
+
+    /**
+     * XML parser used.
+     * Attribute is transient to allow serialization. In this implementaiton,
+     * xmlParser is created each time we need it ;-(.
+     */
+    protected transient XmlParser xmlParser;
+
+    /**
+     * Do we want validating parser. Default is <code>false</code>.
+     * Can be set from servlet config file.
+     */
+    protected boolean isValidatingParser = false;
+
+    /**
+     * Parser detail level. Default is 0.
+     * Can be set from servlet config file.
+     */
+    protected int parserDetailLevel = 0;
+
+    /**
+     * Names of files containing instances descriptions.
+     */
+    private List filenames = null;
+
+    /**
+     * Collection of already loaded definitions set, referenced by their suffix.
+     */
+    private Map loaded = null;
+
+    /**
+     * Parameterless Constructor.
+     * Method {@link #initFactory} must be called prior to any use of created factory.
+     */
+    public PortalTilesDefinitionsFactory() {
+        super();
+    }
+
+    /**
+     * Constructor.
+     * Init the factory by reading appropriate configuration file.
+     * @param servletContext Servlet context.
+     * @param properties Map containing all properties.
+     * @throws FactoryNotFoundException Can't find factory configuration file.
+     */
+    public PortalTilesDefinitionsFactory(ServletContext servletContext, Map properties)
+        throws DefinitionsFactoryException {
+        super();
+        initFactory(servletContext, properties);
+    }
+
+    /**
+     * Initialization method.
+     * Init the factory by reading appropriate configuration file.
+     * This method is called exactly once immediately after factory creation in
+     * case of internal creation (by DefinitionUtil).
+     * @param servletContext Servlet Context passed to newly created factory.
+     * @param properties Map of name/property passed to newly created factory. Map can contains
+     * more properties than requested.
+     * @throws DefinitionsFactoryException An error occur during initialization.
+     */
+    public void initFactory(ServletContext servletContext, Map properties)
+        throws DefinitionsFactoryException {
+        // Set some property values
+        String value = (String) properties.get(PARSER_VALIDATE_PARAMETER_NAME);
+        if (value != null) {
+            isValidatingParser = Boolean.valueOf(value).booleanValue();
+        }
+
+        value = (String) properties.get(PARSER_DETAILS_PARAMETER_NAME);
+        if (value != null) {
+            try {
+                parserDetailLevel = Integer.valueOf(value).intValue();
+
+            } catch (NumberFormatException ex) {
+                log.error(
+                    "Bad format for parameter '"
+                        + PARSER_DETAILS_PARAMETER_NAME
+                        + "'. Integer expected.");
+            }
+        }
+
+        // init factory withappropriate configuration file
+        // Try to use provided filename, if any.
+        // If no filename are provided, try to use default ones.
+        String filename = (String) properties.get(DEFINITIONS_CONFIG_PARAMETER_NAME);
+        if (filename != null) { // Use provided filename
+            try {
+                initFactory(servletContext, filename);
+                if (log.isDebugEnabled()) {
+                    log.debug("Factory initialized from file '" + filename + "'.");
+                }
+
+            } catch (FileNotFoundException ex) { // A filename is specified, throw appropriate error.
+                log.error(ex.getMessage() + " : Can't find file '" + filename + "'");
+                throw new FactoryNotFoundException(
+                    ex.getMessage() + " : Can't find file '" + filename + "'");
+            }
+
+        } else { // try each default file names
+            for (int i = 0; i < DEFAULT_DEFINITION_FILENAMES.length; i++) {
+                filename = DEFAULT_DEFINITION_FILENAMES[i];
+                try {
+                    initFactory(servletContext, filename);
+                    if (log.isInfoEnabled()) {
+                        log.info(
+                            "Factory initialized from file '" + filename + "'.");
+                    }
+                } catch (FileNotFoundException ex) {
+                    // Do nothing
+                }
+            }
+        }
+
+    }
+
+    /**
+     * Initialization method.
+     * Init the factory by reading appropriate configuration file.
+     * This method is called exactly once immediately after factory creation in
+     * case of internal creation (by DefinitionUtil).
+     * @param servletContext Servlet Context passed to newly created factory.
+     * @param proposedFilename File names, comma separated, to use as  base file names.
+     * @throws DefinitionsFactoryException An error occur during initialization.
+     */
+    protected void initFactory(
+        ServletContext servletContext,
+        String proposedFilename)
+        throws DefinitionsFactoryException, FileNotFoundException {
+
+        // Init list of filenames
+        StringTokenizer tokenizer = new StringTokenizer(proposedFilename, ",");
+        this.filenames = new ArrayList(tokenizer.countTokens());
+        while (tokenizer.hasMoreTokens()) {
+            this.filenames.add(tokenizer.nextToken().trim());
+        }
+
+        loaded = new HashMap();
+        defaultFactory = createDefaultFactory(servletContext);
+        if (log.isDebugEnabled())
+            log.debug("default factory:" + defaultFactory);
+    }
+
+    /**
+     * Get default factory.
+     * @return Default factory
+     */
+    protected DefinitionsFactory getDefaultFactory() {
+        return defaultFactory;
+    }
+
+    /**
+     * Create default factory .
+     * Create InstancesMapper for specified Locale.
+     * If creation failes, use default mapper and log error message.
+     * @param servletContext Current servlet context. Used to open file.
+     * @return Created default definition factory.
+     * @throws DefinitionsFactoryException If an error occur while creating factory.
+     * @throws FileNotFoundException if factory can't be loaded from filenames.
+     */
+    protected DefinitionsFactory createDefaultFactory(ServletContext servletContext)
+        throws DefinitionsFactoryException, FileNotFoundException {
+
+        XmlDefinitionsSet rootXmlConfig = parseXmlFiles(servletContext, "", null);
+        if (rootXmlConfig == null) {
+            throw new FileNotFoundException();
+        }
+
+        rootXmlConfig.resolveInheritances();
+
+        if (log.isDebugEnabled()) {
+            log.debug(rootXmlConfig);
+        }
+
+        DefinitionsFactory factory = new DefinitionsFactory(rootXmlConfig);
+        if (log.isDebugEnabled()) {
+            log.debug("factory loaded : " + factory);
+        }
+
+        return factory;
+    }
+
+    /**
+     * Extract key that will be used to get the sub factory.
+     * @param name Name of requested definition
+     * @param request Current servlet request.
+     * @param servletContext Current servlet context.
+     * @return the key or <code>null</code> if not found.
+     */
+    protected Object getDefinitionsFactoryKey(
+        String name,
+        ServletRequest request,
+        ServletContext servletContext) {
+
+        Locale locale = null;
+        try {
+            HttpSession session = ((HttpServletRequest) request).getSession(false);
+            if (session != null) {
+                locale = (Locale) session.getAttribute(ComponentConstants.LOCALE_KEY);
+            }
+
+        } catch (ClassCastException ex) {
+            log.error("I18nFactorySet.getDefinitionsFactoryKey");
+            ex.printStackTrace();
+        }
+
+        return locale;
+    }
+
+    /**
+     * Create a factory for specified key.
+    * If creation failes, return default factory and log an error message.
+    * @param key The key.
+    * @param request Servlet request.
+    * @param servletContext Servlet context.
+    * @return Definition factory for specified key.
+    * @throws DefinitionsFactoryException If an error occur while creating factory.
+     */
+    protected DefinitionsFactory createFactory(
+        Object key,
+        ServletRequest request,
+        ServletContext servletContext)
+        throws DefinitionsFactoryException {
+
+        if (key == null) {
+            return getDefaultFactory();
+        }
+
+        // Build possible postfixes
+        List possiblePostfixes = calculateSuffixes((Locale) key);
+
+        // Search last postix corresponding to a config file to load.
+        // First check if something is loaded for this postfix.
+        // If not, try to load its config.
+        XmlDefinitionsSet lastXmlFile = null;
+        DefinitionsFactory factory = null;
+        String curPostfix = null;
+        int i = 0;
+
+        for (i = possiblePostfixes.size() - 1; i >= 0; i--) {
+            curPostfix = (String) possiblePostfixes.get(i);
+
+            // Already loaded ?
+            factory = (DefinitionsFactory) loaded.get(curPostfix);
+            if (factory != null) { // yes, stop search
+                return factory;
+            }
+
+            // Try to load it. If success, stop search
+            lastXmlFile = parseXmlFiles(servletContext, curPostfix, null);
+            if (lastXmlFile != null) {
+                break;
+            }
+        }
+
+        // Have we found a description file ?
+        // If no, return default one
+        if (lastXmlFile == null) {
+            return getDefaultFactory();
+        }
+
+        // We found something. Need to load base and intermediate files
+        String lastPostfix = curPostfix;
+        XmlDefinitionsSet rootXmlConfig = parseXmlFiles(servletContext, "", null);
+        for (int j = 0; j < i; j++) {
+            curPostfix = (String) possiblePostfixes.get(j);
+            parseXmlFiles(servletContext, curPostfix, rootXmlConfig);
+        }
+
+        rootXmlConfig.extend(lastXmlFile);
+        rootXmlConfig.resolveInheritances();
+
+        factory = new DefinitionsFactory(rootXmlConfig);
+        loaded.put(lastPostfix, factory);
+
+        if (log.isDebugEnabled()) {
+            log.debug("factory loaded : " + factory);
+        }
+
+        // return last available found !
+        return factory;
+    }
+
+    /**
+     * Calculate the suffixes based on the locale.
+     * @param locale the locale
+     */
+    private List calculateSuffixes(Locale locale) {
+
+        List suffixes = new ArrayList(3);
+        String language = locale.getLanguage();
+        String country  = locale.getCountry();
+        String variant  = locale.getVariant();
+
+        StringBuffer suffix = new StringBuffer();
+        suffix.append('_');
+        suffix.append(language);
+        if (language.length() > 0) {
+            suffixes.add(suffix.toString());
+        }
+
+        suffix.append('_');
+        suffix.append(country);
+        if (country.length() > 0) {
+            suffixes.add(suffix.toString());
+        }
+
+        suffix.append('_');
+        suffix.append(variant);
+        if (variant.length() > 0) {
+            suffixes.add(suffix.toString());
+        }
+
+        return suffixes;
+
+    }
+
+    /**
+     * Parse files associated to postix if they exist.
+     * For each name in filenames, append postfix before file extension,
+     * then try to load the corresponding file.
+     * If file doesn't exist, try next one. Each file description is added to
+     * the XmlDefinitionsSet description.
+     * The XmlDefinitionsSet description is created only if there is a definition file.
+     * Inheritance is not resolved in the returned XmlDefinitionsSet.
+     * If no description file can be opened and no definiion set is provided, return <code>null</code>.
+     * @param postfix Postfix to add to each description file.
+     * @param xmlDefinitions Definitions set to which definitions will be added. If <code>null</code>, a definitions
+     * set is created on request.
+     * @return XmlDefinitionsSet The definitions set created or passed as parameter.
+     * @throws DefinitionsFactoryException On errors parsing file.
+     */
+    private XmlDefinitionsSet parseXmlFiles(
+        ServletContext servletContext,
+        String postfix,
+        XmlDefinitionsSet xmlDefinitions)
+        throws DefinitionsFactoryException {
+
+        if (postfix != null && postfix.length() == 0) {
+            postfix = null;
+        }
+
+        // Iterate throw each file name in list
+        Iterator i = filenames.iterator();
+        while (i.hasNext()) {
+            String filename = concatPostfix((String) i.next(), postfix);
+            xmlDefinitions = parseXmlFile(servletContext, filename, xmlDefinitions);
+        }
+
+        /*
+         * START
+         */
+        xmlDefinitions = parseExtXmlFiles(xmlDefinitions);
+        /*
+         * END
+         */
+
+        return xmlDefinitions;
+    }
+
+    private XmlDefinitionsSet parseExtXmlFiles(XmlDefinitionsSet xmlDefinitions)
+            throws DefinitionsFactoryException {
+        String resourceName = "WEB-INF/tiles-defs-ext.xml";
+        try {
+            Enumeration<URL> urls = PortalClassLoaderUtil.getClassLoader().getResources(resourceName);
+            if (_log.isDebugEnabled() && !urls.hasMoreElements()) {
+                _log.debug("No " + resourceName + " has been found");
+            }
+            while (urls.hasMoreElements()) {
+                URL url = urls.nextElement();
+		if (_log.isDebugEnabled()) {
+			_log.debug("Loading " + resourceName + " from " + url);
+		}
+                InputStream resource = new UrlResource(url).getInputStream();
+                try {
+                    // If still nothing found, this mean no config file is associated
+                    if (resource == null) {
+                        if (log.isDebugEnabled()) {
+                            log.debug("Can't open file '" + url.getPath() + "'");
+                        }
+                    } else {
+
+                        // Check if definition set already exist.
+                        if (xmlDefinitions == null) {
+                            xmlDefinitions = new XmlDefinitionsSet();
+                        }
+
+                        xmlParser = new XmlParser();
+                        xmlParser.setValidating(isValidatingParser);
+                        xmlParser.parse(resource, xmlDefinitions);
+                    }
+                } catch (Exception e){
+                    log.error("Cannot load tiles ext file "+url, e);
+                } finally {
+                    if(resource != null){
+                        try {
+                            resource.close();
+                        } catch (IOException e) {
+                            log.error("Cannot close input stream for the "+url, e);
+                        }
+                    }
+                }
+            }
+
+        } catch (Exception ex) {
+            throw new DefinitionsFactoryException(
+                    "IO Error while parsing file '" + resourceName + "'. " + ex.getMessage(),
+                    ex);
+        }
+
+        return xmlDefinitions;
+    }
+
+
+    /**
+     * Parse specified xml file and add definition to specified definitions set.
+     * This method is used to load several description files in one instances list.
+     * If filename exists and definition set is <code>null</code>, create a new set. Otherwise, return
+     * passed definition set (can be <code>null</code>).
+     * @param servletContext Current servlet context. Used to open file.
+     * @param filename Name of file to parse.
+     * @param xmlDefinitions Definitions set to which definitions will be added. If null, a definitions
+     * set is created on request.
+     * @return XmlDefinitionsSet The definitions set created or passed as parameter.
+     * @throws DefinitionsFactoryException On errors parsing file.
+     */
+    private XmlDefinitionsSet parseXmlFile(
+        ServletContext servletContext,
+        String filename,
+        XmlDefinitionsSet xmlDefinitions)
+        throws DefinitionsFactoryException {
+
+        try {
+            InputStream input = servletContext.getResourceAsStream(filename);
+            // Try to load using real path.
+            // This allow to load config file under websphere 3.5.x
+            // Patch proposed Houston, Stephen (LIT) on 5 Apr 2002
+            if (null == input) {
+                try {
+                    input =
+                        new java.io.FileInputStream(
+                            servletContext.getRealPath(filename));
+                } catch (Exception e) {
+                }
+            }
+
+            // If the config isn't in the servlet context, try the class loader
+            // which allows the config files to be stored in a jar
+            if (input == null) {
+                input = getClass().getResourceAsStream(filename);
+            }
+
+            // If still nothing found, this mean no config file is associated
+            if (input == null) {
+                if (log.isDebugEnabled()) {
+                    log.debug("Can't open file '" + filename + "'");
+                }
+                return xmlDefinitions;
+            }
+
+            // Check if parser already exist.
+            // Doesn't seem to work yet.
+            //if( xmlParser == null )
+            if (true) {
+                xmlParser = new XmlParser();
+                xmlParser.setValidating(isValidatingParser);
+            }
+
+            // Check if definition set already exist.
+            if (xmlDefinitions == null) {
+                xmlDefinitions = new XmlDefinitionsSet();
+            }
+
+            xmlParser.parse(input, xmlDefinitions);
+
+        } catch (SAXException ex) {
+            if (log.isDebugEnabled()) {
+                log.debug("Error while parsing file '" + filename + "'.");
+                ex.printStackTrace();
+            }
+            throw new DefinitionsFactoryException(
+                "Error while parsing file '" + filename + "'. " + ex.getMessage(),
+                ex);
+
+        } catch (IOException ex) {
+            throw new DefinitionsFactoryException(
+                "IO Error while parsing file '" + filename + "'. " + ex.getMessage(),
+                ex);
+        }
+
+        return xmlDefinitions;
+    }
+
+
+    /**
+     * Concat postfix to the name. Take care of existing filename extension.
+     * Transform the given name "name.ext" to have "name" + "postfix" + "ext".
+     * If there is no ext, return "name" + "postfix".
+     * @param name Filename.
+     * @param postfix Postfix to add.
+     * @return Concatenated filename.
+     */
+    private String concatPostfix(String name, String postfix) {
+        if (postfix == null) {
+            return name;
+        }
+
+        // Search file name extension.
+        // take care of Unix files starting with .
+        int dotIndex = name.lastIndexOf(".");
+        int lastNameStart = name.lastIndexOf(java.io.File.pathSeparator);
+        if (dotIndex < 1 || dotIndex < lastNameStart) {
+            return name + postfix;
+        }
+
+        String ext = name.substring(dotIndex);
+        name = name.substring(0, dotIndex);
+        return name + postfix + ext;
+    }
+
+    /**
+     * Return String representation.
+     * @return String representation.
+     */
+    public String toString() {
+        StringBuffer buff = new StringBuffer("I18nFactorySet : \n");
+        buff.append("--- default factory ---\n");
+        buff.append(defaultFactory.toString());
+        buff.append("\n--- other factories ---\n");
+        Iterator i = factories.values().iterator();
+        while (i.hasNext()) {
+            buff.append(i.next().toString()).append("---------- \n");
+        }
+        return buff.toString();
+    }
+}
\ No newline at end of file
